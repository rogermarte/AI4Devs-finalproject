datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Enums
enum UserType {
  PSI
  INVESTOR
}

enum PropertyStatus {
  DRAFT
  PUBLISHED
  RESERVED
  SOLD
}

enum ConnectionStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum InvestmentStatus {
  INTERESTED
  IN_PROCESS
  COMPLETED
  CANCELLED
}

// Modelos principales
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  profile              UserProfile?
  investments          Investment[]
  properties           Property[] // Para PSIs
  connectionsInitiated Connection[] @relation("UserFrom")
  connectionsReceived  Connection[] @relation("UserTo")
  messagesSent         Message[]    @relation("MessageSender")

  @@map("users")
}

model UserProfile {
  id         String    @id @default(uuid())
  userId     String    @unique
  type       UserType
  name       String
  phone      String?
  verifiedAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  // Relaciones
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  preferences Preference[]

  @@map("user_profiles")
}

model Property {
  id           String         @id @default(uuid())
  psiId        String
  title        String
  description  String
  address      String
  price        Decimal        @db.Decimal(10, 2)
  squareMeters Float
  features     Json
  status       PropertyStatus @default(DRAFT)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  // Relaciones
  psi         User         @relation(fields: [psiId], references: [id])
  investments Investment[]
  documents   Document[]
  analysis    Analysis[]

  @@index([psiId, status])
  @@index([status])
  @@index([price])
  @@map("properties")
}

model Investment {
  id         String           @id @default(uuid())
  investorId String
  propertyId String
  status     InvestmentStatus
  amount     Decimal          @db.Decimal(10, 2)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  // Relaciones
  investor  User       @relation(fields: [investorId], references: [id])
  property  Property   @relation(fields: [propertyId], references: [id])
  documents Document[]

  @@index([investorId, status])
  @@map("investments")
}

model Analysis {
  id               String   @id @default(uuid())
  propertyId       String
  roi              Float
  monthlyIncome    Decimal  @db.Decimal(10, 2)
  expenses         Decimal  @db.Decimal(10, 2)
  financialMetrics Json
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relaciones
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@map("analyses")
}

model Connection {
  id         String           @id @default(uuid())
  userFromId String
  userToId   String
  status     ConnectionStatus
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  // Relaciones
  userFrom User      @relation("UserFrom", fields: [userFromId], references: [id])
  userTo   User      @relation("UserTo", fields: [userToId], references: [id])
  messages Message[]

  @@unique([userFromId, userToId])
  @@map("connections")
}

model Message {
  id           String   @id @default(uuid())
  connectionId String
  senderId     String
  content      String   @db.Text
  read         Boolean  @default(false)
  createdAt    DateTime @default(now())

  // Relaciones
  connection Connection @relation(fields: [connectionId], references: [id], onDelete: Cascade)
  sender     User       @relation("MessageSender", fields: [senderId], references: [id])

  @@index([connectionId, createdAt])
  @@map("messages")
}

model Document {
  id           String   @id @default(uuid())
  propertyId   String?
  investmentId String?
  type         String
  url          String
  name         String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relaciones
  property   Property?   @relation(fields: [propertyId], references: [id])
  investment Investment? @relation(fields: [investmentId], references: [id])

  @@map("documents")
}

model Preference {
  id        String   @id @default(uuid())
  profileId String
  type      String
  value     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  profile UserProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@map("preferences")
}
